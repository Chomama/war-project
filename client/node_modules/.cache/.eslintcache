[{"/Users/ryancho/Desktop/Projects/war-project/client/src/index.js":"1","/Users/ryancho/Desktop/Projects/war-project/client/src/App.js":"2","/Users/ryancho/Desktop/Projects/war-project/client/src/components/Card.js":"3","/Users/ryancho/Desktop/Projects/war-project/client/src/components/ScoreBoard.js":"4"},{"size":221,"mtime":1641759222549,"results":"5","hashOfConfig":"6"},{"size":7523,"mtime":1641947316059,"results":"7","hashOfConfig":"6"},{"size":550,"mtime":1641948569770,"results":"8","hashOfConfig":"6"},{"size":276,"mtime":1641946199367,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1muxxa8",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ryancho/Desktop/Projects/war-project/client/src/index.js",[],"/Users/ryancho/Desktop/Projects/war-project/client/src/App.js",["19"],"import \"./App.css\";\nimport React, { useEffect } from \"react\";\nimport Card from \"./components/Card\";\nimport ScoreBoard from \"./components/ScoreBoard\"\n\nconst CARDS = ['D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10', 'D11', 'D12', 'D13', 'D14',\n'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14',\n'H2', 'H3', 'H4', 'H5', 'H6', 'H7', 'H8', 'H9', 'H10', 'H11', 'H12', 'H13', 'H14',\n'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'S9', 'S10', 'S11', 'S12', 'S13', 'S14'];\n\nconst gameStates = { notStarted: \"notStarted\", inProgress: \"inProgress\", done: \"done\" }; \n\nfunction App() {\n  const [gameValues, setGameValues] = React.useState({\n      gameState : gameStates.notStarted,\n      playerOneDeck : [],\n      playerTwoDeck : [],\n      playerOnePlayedCard : null,\n      playerTwoPlayedCard : null,\n      roundWinner : null,\n      roundStatus: null,\n      intervalId : null,\n      playerOneWins: null,\n      playerTwoWins: null\n  }\n  )\n\n  //calls api to get players lifetime wins\n  async function getWins(playerId1, playerId2) {\n      fetch(`/getWins?playerId1=${playerId1}&playerId2=${playerId2}`, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n      }\n      }).then(response => response.json())\n      .then(json => {\n        var player1Wins = json[0].WINS;\n        var player2Wins = json[1].WINS;\n        var newValues = {...gameValues};\n        newValues.playerOneWins = player1Wins;\n        newValues.playerTwoWins = player2Wins;\n        setGameValues(newValues);\n      });\n  }\n\n  //calls api to update players wins\n  async function updateWins(playerId) {\n    fetch(`/updateWins?playerId=${playerId}`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    }\n    });    \n  }\n\n  //initializes initial game values\n  function startGame() {\n    var shuffledDeck = CARDS.sort(() => Math.random() - 0.5);\n    var newValues = {...gameValues};\n    if (gameValues.gameState !== gameStates.inProgress) {\n      newValues.gameState = gameStates.inProgress;\n    }\n    newValues.playerOneDeck = shuffledDeck.slice(0, 26);\n    newValues.playerTwoDeck = shuffledDeck.slice(26);\n    setGameValues(newValues);\n  }\n\n  useEffect(() => {\n    //populates scoreboard\n    getWins(\"playerOne\", \"playerTwo\");\n\n    //if game is in progress, call playRound on timer every second to simulate players playing\n    if (gameValues.gameState === gameStates.inProgress) {\n      let letIntervalID = setInterval(() => {\n        playRound()\n      }, 1000);\n      setGameValues({...gameValues, intervalId : letIntervalID}); \n    } else {\n      clearInterval(gameValues.intervalID);\n    }\n  }, [gameValues.gameState]);\n\n  \n  function playRound() {\n      var p1DeckCopy = gameValues.playerOneDeck;\n      var p2DeckCopy = gameValues.playerTwoDeck;\n      var cardsWon = [];\n      var roundWinner;\n      var roundStatus;\n      var gameState = gameStates.inProgress;\n\n      //gets cards from players decks\n      var playerOneCard = p1DeckCopy.shift();\n      var playerTwoCard = p2DeckCopy.shift();\n\n      cardsWon.push(playerOneCard, playerTwoCard);\n\n      var playerOneCardVal = parseInt(playerOneCard.replace ( /[^\\d.]/g, '' ));\n      var playerTwoCardVal = parseInt(playerTwoCard.replace ( /[^\\d.]/g, '' ));\n\n      //war\n      if(playerOneCardVal === playerTwoCardVal) {\n        var inWar = true;\n        //continues in case of ties during war \n        while(inWar) {\n          //player loses if not enough cards to have war\n          if(p1DeckCopy.length < 2) {\n            inWar = false;\n            roundWinner = \"playerOne\";\n            roundStatus = 'Player one is out of cards.  Player two wins!'\n            gameState = gameStates.done;\n            updateWins(\"playerTwo\");\n          } else if(p2DeckCopy.length < 2) {\n            inWar = false;\n            roundWinner = \"playerTwo\";\n            roundStatus = 'Player two is out of cards.  Player one wins!'\n            gameState = gameStates.done;\n            updateWins(\"playerOne\");\n          } else { \n            //plays out standard war round\n            var playerOneWarCard = p1DeckCopy.shift();\n            var playerTwoWarCard = p2DeckCopy.shift();\n            var playerOneWarCardVal = parseInt(playerOneWarCard.replace ( /[^\\d.]/g, '' ));\n            var playerTwoWarCardVal = parseInt(playerTwoWarCard.replace ( /[^\\d.]/g, '' ));\n            cardsWon.push(playerOneWarCard, playerTwoWarCard);\n            var playerOneFaceDownCard = p1DeckCopy.shift();\n            var playerTwoFaceDownCard = p2DeckCopy.shift();\n            cardsWon.push(playerOneFaceDownCard, playerTwoFaceDownCard);\n            if(playerOneWarCardVal > playerTwoWarCardVal) {\n              roundWinner = \"playerOne\";\n              p1DeckCopy.push(...cardsWon);\n              inWar = false;\n              roundStatus = \"War was declared.  Player 1 won the war and received \" + cardsWon.length + \"cards.\";\n            } else if(playerTwoWarCardVal > playerOneWarCardVal) {\n                roundWinner = \"playerTwo\";\n                p2DeckCopy.push(...cardsWon);\n                inWar = false;\n                roundStatus = \"War was declared.  Player 2 won the war and received \" + cardsWon.length + \"cards\";\n            }\n          }\n        }\n      } else {\n        //standard non-war scenario\n        if(playerOneCardVal > playerTwoCardVal) {\n          roundWinner = \"playerOne\";\n          p1DeckCopy.push(...cardsWon);\n          roundStatus = \"Player One won \" + cardsWon.length + \" cards\";\n        } else {\n          roundWinner = \"playerTwo\";\n          p2DeckCopy.push(...cardsWon);\n          roundStatus = \"Player Two won \" + cardsWon.length + \" cards\";\n        }\n      }  \n    \n      //win conditions\n      if(p1DeckCopy.length === 0) {\n        roundStatus = \"Player one has no cards left. PLAYER TWO HAS WON!\"\n        gameState = gameStates.done;\n        updateWins(\"playerTwo\");\n      } else if(p2DeckCopy.length === 0) {\n        roundStatus = \"Player two has no cards left. PLAYER ONE HAS WON!\"\n        gameState = gameStates.done;\n        updateWins(\"playerOne\")\n      }\n      \n      //update all the state values\n      var newValues = {...gameValues};\n\n      newValues.playerOneDeck = p1DeckCopy;\n      newValues.playerTwoDeck = p2DeckCopy;\n      newValues.roundWinner = roundWinner;\n      newValues.roundStatus = roundStatus;\n      newValues.playerOnePlayedCard = playerOneCard;\n      newValues.playerTwoPlayedCard = playerTwoCard;\n      newValues.gameState = gameState;\n\n      setGameValues(newValues);\n  }\n\n  return (\n    <div className=\"main\">\n      <div className=\"header\">\n        <h1> WAR</h1>\n        <button id=\"startButton\" onClick={startGame} style={gameValues.gameState !== gameStates.inProgress ? {} : {display: 'none'}}> START </button>\n        <ScoreBoard playerOneWins={gameValues.playerOneWins} playerTwoWins={gameValues.playerTwoWins}/>\n      </div>\n      <div className=\"gameBoard\">\n          <div className = \"playerOne\">\n              <Card player=\"Player One\" cardCount={gameValues.playerOneDeck.length} cardValue={gameValues.playerOnePlayedCard}/>\n          </div>\n          <div className = \"statusSection\"> \n            <p> { gameValues.roundStatus }</p>\n          </div> \n          <div className = \"playerTwo\">\n              <Card player=\"Player Two\" cardCount={gameValues.playerTwoDeck.length} cardValue={gameValues.playerTwoPlayedCard}/>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","/Users/ryancho/Desktop/Projects/war-project/client/src/components/Card.js",["20"],"/Users/ryancho/Desktop/Projects/war-project/client/src/components/ScoreBoard.js",[],{"ruleId":"21","severity":1,"message":"22","line":83,"column":6,"nodeType":"23","endLine":83,"endColumn":28,"suggestions":"24"},{"ruleId":"25","severity":1,"message":"26","line":9,"column":13,"nodeType":"27","endLine":9,"endColumn":107},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameValues', 'getWins', and 'playRound'. Either include them or remove the dependency array. You can also do a functional update 'setGameValues(g => ...)' if you only need 'gameValues' in the 'setGameValues' call.","ArrayExpression",["28"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"29","fix":"30"},"Update the dependencies array to be: [gameValues, gameValues.gameState, getWins, playRound]",{"range":"31","text":"32"},[2733,2755],"[gameValues, gameValues.gameState, getWins, playRound]"]